include "persistence-jdbc"

akka.actor.provider = cluster

akka.remote.classic.netty.tcp.port = 0
akka.remote.artery.canonical.port = 0
akka.remote.artery.canonical.hostname = 127.0.0.1

akka.cluster.jmx.multi-mbeans-in-same-jvm = on

akka.coordinated-shutdown.terminate-actor-system = off
akka.coordinated-shutdown.run-by-actor-system-terminate = off
akka.coordinated-shutdown.run-by-jvm-shutdown-hook = off
akka.cluster.run-coordinated-shutdown-when-down = off

akka {

  stdout-loglevel = "INFO"
  loglevel = "INFO"
#   use-slf4j = on
#   coordinated-shutdown.exit-jvm = off

#   remote.classic.netty.tcp.port = 0
#   cluster.jmx.multi-mbeans-in-same-jvm = on

#   remote.artery {
#     canonical.port = 0
#     canonical.hostname = 127.0.0.1
#   }

  cluster {
#     seed-nodes = ["akka://interop-be-authorization-management@127.0.0.1:2552"]
#     shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 5
    }
#     downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

#   management {
#
#     http {
#       bind-hostname = 0.0.0.0
#       route-providers-read-only = false
#     }
#
#     cluster.bootstrap {
#       contact-point-discovery {
#         discovery-method = kubernetes-api
#         required-contact-point-nr = 1
#       }
#     }
#
#     health-checks {
#       readiness-checks {
#         ready = "it.pagopa.interop.authorizationmanagement.server.impl.HealthCheck"
#       }
#       liveness-checks {
#         live = "it.pagopa.interop.authorizationmanagement.server.impl.LiveCheck"
#       }
#     }
#   }
}

key-management {
  url = "http://localhost:18088/authorization-management/"
  port = 18088

  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  port = 8088
  jwt {
    audience = "aud"
  }
}

interop-commons {
  jwt {
    public-keys {
      urls = "https://interop.uat.selfcare.pagopa.it/.well-known/jwks.json"
    }
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor.fixed-pool-size-min = 4
}

# cqrs-projection {
#   db {
#     name = ${CQRS_PROJECTION_DB_NAME}
#     connection-string = "mongodb://"${CQRS_PROJECTION_DB_USER}":"${CQRS_PROJECTION_DB_PASSWORD}"@"${CQRS_PROJECTION_DB_HOST}":"${CQRS_PROJECTION_DB_PORT}"/?directConnection=true&serverSelectionTimeoutMS=2000"
#     collection-name = ${CQRS_PROJECTION_COLLECTION_NAME}
#   }
# }