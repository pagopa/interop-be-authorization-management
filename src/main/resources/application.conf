akka {

  actor {
    serializers {
      keys-added = "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeysAddedSerializer"
      key-deleted = "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeyDeletedSerializer"
      key-disabled = "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeyDisabledSerializer"
      key-enabled = "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeyEnabledSerializer"
      state = "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeysAddedSerializer"    = 10000
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeyDeletedSerializer"   = 10001
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeyDisabledSerializer"  = 10002
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.KeyEnabledSerializer"   = 10003
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.serializer.StateSerializer"        = 20000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.KeysAdded"   = keys-added
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.KeyDeleted"  = key-deleted
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.KeyDisabled" = key-disabled
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.KeyEnabled"  = key-enabled
      "it.pagopa.pdnd.interop.uservice.keymanagement.model.persistence.State"       = state
    }
  }

  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    journal.auto-start-journals = ["akka.persistence.cassandra.journal"]
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    cassandra {
      events-by-tag {
        bucket-size = "Day"
        eventual-consistency-delay = 2s
        flush-interval = 50ms
        pubsub-notification = on
        first-time-bucket = "20200815T00:00"
      }
      query {
        refresh-interval = 2s
      }
      journal.keyspace = "pdnd_uservice_key_management_persistence"
      snapshot.keyspace = "pdnd_uservice_key_management_persistence"
    }
  }

  projection {
    cassandra.offset-store.keyspace = "pdnd_uservice_key_management_persistence"
    cassandra.session-config-path = "akka.persistence.cassandra"
    restart-backoff {
      min-backoff = 3s
      max-backoff = 30s
      random-factor = 0.2
      max-restarts = -1
    }

    grouped {
      group-after-envelopes = 20
      group-after-duration = 500 ms
    }

    management {
      operation-timeout = 10 s
      ask-timeout = 3 s
    }
  }
}

datastax-java-driver {
  basic {
    contact-points = [${CASSANDRA_HOST}]
    load-balancing-policy.local-datacenter = "dc1"
  }
  advanced {
    reconnect-on-init = true
    auth-provider {
      class = PlainTextAuthProvider
      username = ${CASSANDRA_USER}
      password = ${CASSANDRA_PWD}
    }
  }
}

pdnd-interop-uservice-key-management {
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  persistence = "cassandra"
}
