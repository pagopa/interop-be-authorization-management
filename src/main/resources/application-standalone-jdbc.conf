include "persistence-jdbc"

akka {
  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka://interop-be-authorization-management@127.0.0.1:2552"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

  management {

    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }

    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }

    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.authorizationmanagement.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.authorizationmanagement.server.impl.LiveCheck"
      }
    }
  }
}

authorization-management {
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  port = 8088
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }
}

interop-commons {
  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor.fixed-pool-size-min = 4
}

cqrs-projection {
  db {
    name = ${CQRS_PROJECTION_DB_NAME}
    connection-string = "mongodb://"${CQRS_PROJECTION_DB_USER}":"${CQRS_PROJECTION_DB_PASSWORD}"@"${CQRS_PROJECTION_DB_HOST}":"${CQRS_PROJECTION_DB_PORT}"/?directConnection=true&serverSelectionTimeoutMS=2000"
    collection-name = ${CQRS_PROJECTION_COLLECTION_NAME}
  }
}