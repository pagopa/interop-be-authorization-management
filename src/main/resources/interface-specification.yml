openapi: 3.0.3
info:
  title: Key management microservice
  version: 0.0.1
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  description: Manages the persistence and retrieval of party keys.
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: 'https://gateway.interop.pdnd.dev/pdnd-interop-uservice-key-management/0.0.1'
    description: This contains key management routes
tags:
  - name: key
    description: Operations on keys persistence
  - name: health
    description: Operations about service status
paths:
  /status:
    get:
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        '200':
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/{partyId}/keys':
    post:
      tags:
        - key
      summary: Create Keys for the specific partyId.
      operationId: createKeys
      responses:
        '201':
          description: Keys created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysResponse'
        '400':
          description: Missing Required Information
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Clien id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Keys'
      description: Creates one or more keys for the corresponding party.
      parameters:
        - name: partyId
          in: path
          required: true
          description: ID of party that the added keys MUST belong to
          schema:
            type: string
            format: uuid
    get:
      tags:
        - key
      summary: Returns a set of keys by party ID.
      description: 'Given a party identifier it returns its corresponding set of keys, if any'
      operationId: getPartyKeys
      parameters:
        - name: partyId
          in: path
          description: ID of the party to look up
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeysResponse'
        '404':
          description: Party id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  '/{partyId}/keys/{keyId}':
    get:
      tags:
        - key
      summary: Returns a key by party and key identifier (kid).
      description: 'Given a party and key identifiers it returns the corresponding key, if any'
      operationId: getPartyKeyById
      parameters:
        - name: partyId
          in: path
          description: ID of the party to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        '200':
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '404':
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - key
      summary: Deletes a key by party and key identifier (kid).
      description: 'Given a party and key identifiers it deletes the corresponding key, if any'
      operationId: deletePartyKeyById
      parameters:
        - name: partyId
          in: path
          description: ID of the party holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: the corresponding key has been deleted.
        '404':
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/{partyId}/keys/{keyId}/disable':
    get:
      tags:
        - key
      summary: Disable a party key by key identifier (kid).
      description: 'Given a party and an enabled key identifier it disables the corresponding key, if any'
      operationId: disableKeyById
      parameters:
        - name: partyId
          in: path
          description: ID of the party holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to disable
          required: true
          schema:
            type: string
      responses:
        '204':
          description: the corresponding key has been disabled.
        '404':
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/{partyId}/keys/{keyId}/enable':
    get:
      tags:
        - key
      summary: Enables a party key by key identifier (kid).
      description: 'Given a party and a disabled key identifier it enables the corresponding key, if any'
      operationId: enableKeyById
      parameters:
        - name: partyId
          in: path
          description: ID of the party holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to enable
          required: true
          schema:
            type: string
      responses:
        '204':
          description: the corresponding key has been enabled.
        '404':
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    KeysResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
      required:
        - keys
    Keys:
      type: array
      items:
        $ref: '#/components/schemas/KeySeed'
    KeySeed:
      description: 'Models the seed for a public key to be persisted'
      type: object
      properties:
        key:
          type: string
        use:
          type: string
          enum:
            - sig
            - enc
        alg:
          type: string
      required:
        - key
        - use
        - alg
    Key:
      description: 'Models a JWK'
      type: object
      properties:
        kty:
          type: string
        key_ops:
          type: array
          items:
            type: string
        use:
          type: string
        alg:
          type: string
        kid:
          type: string
        x5u:
          type: string
          minLength: 1
        x5t:
          type: string
        'x5t#S256':
          type: string
        x5c:
          type: array
          items:
            type: string
        crv:
          type: string
        x:
          type: string
        'y':
          type: string
        d:
          type: string
        k:
          type: string
        'n':
          type: string
        e:
          type: string
        p:
          type: string
        q:
          type: string
        dp:
          type: string
        dq:
          type: string
        qi:
          type: string
        oth:
          uniqueItems: false
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/OtherPrimeInfo'
      required:
        - kty
        - kid
    OtherPrimeInfo:
      title: OtherPrimeInfo
      type: object
      properties:
        r:
          type: string
        d:
          type: string
        t:
          type: string
      required:
        - r
        - d
        - t
    Problem:
      properties:
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: 'A short, summary of the problem type. Written in english and readable'
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
      additionalProperties: false
      required:
        - status
        - title
  securitySchemes: {}