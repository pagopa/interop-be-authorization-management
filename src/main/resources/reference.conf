akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
  actor.provider = cluster
  actor.warn-about-java-serializer-usage = on
  actor.allow-java-serialization = on
  coordinated-shutdown.exit-jvm = on

  http.host-connection-pool {
    max-connections = 16
    max-connections = ${?CONNECTION_POOL_MAX_CONNECTIONS}
    min-connections = 2
    min-connections = ${?CONNECTION_POOL_MIN_CONNECTIONS}
    max-open-requests = 1024
    max-open-requests = ${?CONNECTION_POOL_MAX_OPEN_REQUESTS}
  }

  actor {
    serializers {
      keys-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeysAddedSerializer"
      key-deleted = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeyDeletedSerializer"
      client-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientAddedSerializer"
      client-deleted = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientDeletedSerializer"
      relationship-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipAddedSerializer"
      relationship-removed = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipRemovedSerializer"
      client-purpose-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientPurposeAddedSerializer"
      eservice-state-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.EServiceStateUpdatedSerializer"
      agreement-state-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.AgreementStateUpdatedSerializer"
      purpose-state-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.PurposeStateUpdatedSerializer"
      client-purpose-removed = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientPurposeRemovedSerializer"
      agreement-eservice-states-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.AgreementAndEServiceStatesUpdatedSerializer"
      state = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeysAddedSerializer"                          = 10000
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeyDeletedSerializer"                         = 10001
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientAddedSerializer"                        = 10002
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientDeletedSerializer"                      = 10003
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipAddedSerializer"                  = 10004
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipRemovedSerializer"                = 10005
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientPurposeAddedSerializer"                 = 10006
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.EServiceStateUpdatedSerializer"               = 10007
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.AgreementStateUpdatedSerializer"              = 10008
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.PurposeStateUpdatedSerializer"                = 10009
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientPurposeRemovedSerializer"               = 10010
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.AgreementAndEServiceStatesUpdatedSerializer"  = 10011
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.StateSerializer"                              = 20000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.interop.authorizationmanagement.model.persistence.KeysAdded"                          = keys-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.KeyDeleted"                         = key-deleted
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientAdded"                        = client-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientDeleted"                      = client-deleted
      "it.pagopa.interop.authorizationmanagement.model.persistence.RelationshipAdded"                  = relationship-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.RelationshipRemoved"                = relationship-removed
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientPurposeAdded"                 = client-purpose-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.EServiceStateUpdated"               = eservice-state-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.AgreementStateUpdated"              = agreement-state-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.PurposeStateUpdated"                = purpose-state-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientPurposeRemoved"               = client-purpose-removed
      "it.pagopa.interop.authorizationmanagement.model.persistence.AgreementAndEServiceStatesUpdated"  = agreement-eservice-states-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.State"                              = state
    }
  }


  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

  management {

    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }

    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }

    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.authorizationmanagement.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.authorizationmanagement.server.impl.LiveCheck"
      }
    }
  }
}
