include "persistence-inmem"

akka {
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  actor.provider = cluster
  actor.warn-about-java-serializer-usage = on
  actor.allow-java-serialization = on
  coordinated-shutdown.exit-jvm = on

  remote.artery {
    canonical.port = 2552
    canonical.hostname = 127.0.0.1
  }

  actor {
    serializers {
      keys-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeysAddedSerializer"
      key-deleted = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeyDeletedSerializer"
      client-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientAddedSerializer"
      client-deleted = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientDeletedSerializer"
      relationship-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipAddedSerializer"
      relationship-removed = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipRemovedSerializer"
      client-purpose-added = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientPurposeAddedSerializer"
      eservice-state-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.EServiceStateUpdatedSerializer"
      agreement-state-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.AgreementStateUpdatedSerializer"
      purpose-state-updated = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.PurposeStateUpdatedSerializer"
      state = "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeysAddedSerializer"             = 10000
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.KeyDeletedSerializer"            = 10001
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientAddedSerializer"           = 10002
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientDeletedSerializer"         = 10003
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipAddedSerializer"     = 10004
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.RelationshipRemovedSerializer"   = 10005
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.ClientPurposeAddedSerializer"    = 10006
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.EServiceStateUpdatedSerializer"  = 10007
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.AgreementStateUpdatedSerializer" = 10008
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.PurposeStateUpdatedSerializer"   = 10009
      "it.pagopa.interop.authorizationmanagement.model.persistence.serializer.StateSerializer"                 = 20000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.interop.authorizationmanagement.model.persistence.KeysAdded"             = keys-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.KeyDeleted"            = key-deleted
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientAdded"           = client-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientDeleted"         = client-deleted
      "it.pagopa.interop.authorizationmanagement.model.persistence.RelationshipAdded"     = relationship-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.RelationshipRemoved"   = relationship-removed
      "it.pagopa.interop.authorizationmanagement.model.persistence.ClientPurposeAdded"    = client-purpose-added
      "it.pagopa.interop.authorizationmanagement.model.persistence.EServiceStateUpdated"  = eservice-state-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.AgreementStateUpdated" = agreement-state-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.PurposeStateUpdated"   = purpose-state-updated
      "it.pagopa.interop.authorizationmanagement.model.persistence.State"                 = state
    }
  }


  cluster {
    seed-nodes = ["akka://interop-be-authorization-management@127.0.0.1:2552"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

  management {

    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }

    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }

    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.authorizationmanagement.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.authorizationmanagement.server.impl.LiveCheck"
      }
    }
  }
}

key-management {
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  port = 8088
  jwt {
    audience = [ ${MAIN_AUDIENCE} ]
  }
}

pdnd-interop-commons {
  jwt {
    public-keys {
      url = ${WELL_KNOWN_URL}
    }
  }
}